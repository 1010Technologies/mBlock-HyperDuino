{	"extensionName": "HyperDuino",
	"description": "A Block-Based Programming Environment for the HyperDuino",
	"version": "1.5.1",
	"author": "Roger Wagner(hyperduino@1010technologies.com)",
	"homepage": "http://hyperduino.com/",
	"sort":0,
	"javascriptURL":"js/HyperDuino.js",
  "firmware":"1.0",
  "extensionPort":0,
	"blockSpecs": [
		["h","HyperDuino","runArduino"],

		["w", "HyperDuino board %d.board",
			"setBoard",
			"HD 4",
			{
				"inc":"#define BOARD {0}\n#include \"HyperDuino.h\"\n",
				"def":"",
				"setup":"hd_InitCapsense();\n",
				"work":"",
				"loop":""
			}
			],

    ["B", "HyperDuino %n Is Touched",
		"getTouch",
		"2",
		{
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"setup":"hd_InitCapsense();\n",
			"work":"(hd_isPinTouched({0}))",
			"loop":""
		}
		],

    [
      "r",
      "get HyperDuino touch pin",
      "getTouchPin",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "hd_InitCapsense();\n",
        "work": "(hd_getTouchPin())",
        "loop": ""
      }
    ],

    [
      "w",
      "play %n times per second on pin %n",
      "playFrequency",
      "10",
      "13",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "hd_InitPlayFrequency();\n",
        "work": "hd_PlayFrequency({0},{1});\n",
        "loop": ""
      }
    ],

    [
      "w",
      "stop playing on pin %n",
      "stopPlayFrequency",
      "13",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "",
        "work": "hd_StopPlayFrequency({0});\n",
        "loop": ""
      }
    ],

    ["w",
		"motor move forward speed A: %n B: %n",
		"motorForward",
		"255",
		"255",
		{
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"setup":"hd_MotorSetup(BOARD);\n",
			"work":"hd_MotorForward({0},{1});\n",
			"loop":""
		}
		],

		["w",
		"motor move backward speed A: %n B: %n",
		"motorBackward",
		"255",
		"255",
		{
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"setup":"hd_MotorSetup(BOARD);\n",
			"work":"hd_MotorBackward({0},{1});\n",
			"loop":""
		}
		],

    ["w",
		"motor turn left at speed: %n",
		"motorLeft",
		"255",
		{
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"setup":"hd_MotorSetup(BOARD);\n",
			"work":"hd_MotorLeft({0});\n",
			"loop":""
		}
		],

    ["w",
		"motor turn right at speed: %n",
		"motorRight",
		"255",
		{
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"setup":"hd_MotorSetup(BOARD);\n",
			"work":"hd_MotorRight({0});\n",
			"loop":""
		}
		],

    ["w",
		"motor stop %d.motorStop",
    "motorStop",
    "A+B",
		{
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"setup":"hd_MotorSetup(BOARD);\n",
			"work":"hd_MotorStop({0});\n",
			"loop":""
		}
		],

    ["w",
		"play MP3 track %n from folder %n %d.mp3repeat",
		"serialmp3play",
		"1",
		"1",
		"once",
		{
			"setup":"",
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"work":"MP3_SendCommand(CMD_PLAY_FOLDER_FILE, {1}*256 + {0});\nif ({2}) MP3_SendCommand(CMD_SET_SNGL_CYCL, 0);\n",
			"loop":""
		}
		],

    ["w",
		"send MP3 command %d.mp3command",
		"serialmp3command",
		"Play next track",
		{
			"setup":"",
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"work":"MP3_SendCommand({0}, 0);\n",
			"loop":"" 
		}
		],

    ["w",
		"set MP3 volume to %n",
		"serialmp3volume",
		"30",
		{
			"setup":"",
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"work":"MP3_SendCommand(CMD_SET_VOLUME, {0});\n",
			"loop":"" 
		}
		],

    ["B",
		"MP3 Is Playing",
		"serialmp3isplaying",
		{
			"setup":"",
			"inc":"#include \"HyperDuino.h\"\n",
			"def":"",
			"work":"(MP3_IsPlaying())",
			"loop":""
		}
		],

    ["w",
			"LCD setup I2C %d.LCDI2C columns %d.LCDcolumns rows %d.LCDrows",
			"lcdAddress",
			"0x27",
			"16",
			"2",
			{
				"inc":"#include \"HyperDuino.h\"\n",
				"def":"LiquidCrystal_I2C lcd({0}, {1}, {2});\n",
				"setup":"lcd.begin();\nlcd.backlight();\n",
				"work":"",
				"loop":"" 
			}
		],

    ["w",
			"LCD clear",
			"lcdClear",
			{
				"inc":"#include \"HyperDuino.h\"\n",
				"def":"",
				"setup":"",
				"work":"lcd.clear();\n",
				"loop":"" 
			}
		],

    ["w",
			"LCD set cursor column %n row %n",
			"lcdSetCursor",
			"0",
			"0",
			{
				"inc":"#include \"HyperDuino.h\"\n",
				"def":"",
				"setup":"",
				"work":"lcd.setCursor({0},{1});\n",
				"loop":"" 
			}
		],

    ["w",
			"LCD print %s",
			"lcdPrint",
			"hello",
			{
				"inc":"#include \"HyperDuino.h\"\n",
				"def":"",
				"setup":"",
				"work":"hd_lcdPrint(lcd, {0});\n",
				"loop":"" 
			}
		],

    [
      "w",
      "LCD print %s with %n decimals",
      "lcdPrintWithDecimals",
      "3.14",
      "2",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "",
        "work": "hd_lcdPrint(lcd, {0}, {1});\n",
        "loop": ""
      }
    ],

    ["w",
			"Bluetooth setup TX %d.BT_TX RX %d.BT_RX",
			"btSetup",
			"A1",
			"A0",
			{
				"inc":"#include <SoftwareSerial.h>\n",
				"def":"SoftwareSerial bluetooth({0}, {1});\n",
				"setup":"bluetooth.begin(9600);\ndelay(200);\n",
				"work":"",
				"loop":"" 
			}
		],

    ["w",
			"Bluetooth rename %s",
			"btRename",
			"BT1010",
			{
				"inc":"#include \"HyperDuino.h\"\n",
				"def":"",
				"setup":"hd_softSerialSend(bluetooth,\"AT+NAME\" {0});\ndelay(1000);\n",
				"work":"",
				"loop":"" 
			}
		],

    ["w",
			"Bluetooth send command %s",
			"btSendCommand",
			"AT",
			{
				"inc":"#include \"HyperDuino.h\"\n",
				"def":" ",
				"setup":"",
				"work":"hd_softSerialSend(bluetooth,{0});\n",
				"loop":"" 
			}
		],

    [
      "b",
      "Bluetooth has response",
      "btHasResponse",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "",
        "work": "hd_bluetoothHasResponse(bluetooth)",
        "loop": ""
      }
    ],

    ["r",
			"Bluetooth response",
			"btReceive",
			{
				"inc":"#include \"HyperDuino.h\"\n",
				"def":"",
				"setup":"",
				"work":"hd_softSerialReceive(bluetooth)",
				"loop":"" 
			}
		],

    [
      "b",
      "Bitty Controller has event",
      "btBittyHasEvent",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "",
        "work": "hd_bittyControllerHasEvent(bluetooth)",
        "loop": ""
      }
    ],

    [
      "b",
      "Bitty Controller event %d.BITTY_EVENT",
      "btBittyEvent",
      "Dpad",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "",
        "work": "hd_bittyControllerEvent({0})",
        "loop": ""
      }
    ],

    [
      "b",
      "Bitty %d.DPAD_PAD dpad, %d.DPAD_BUTTON button, %d.DPAD_STATE",
      "btBittyDpadEvent",
      "left",
      "top",
      "pressed",
      {
        "inc": "#include \"HyperDuino.h\"\n",
        "def": "",
        "setup": "",
        "work": "hd_bittyControllerDpad({0}, {1}, {2})",
        "loop": ""
      }
    ],
  
    ["r",
			"ArduinoBlue get button",
			"abGetButton",
			{
				"inc":"#include \"ArduinoBlue_hf.h\"\n",
				"def":"ArduinoBlue phone(bluetooth);\n",
				"setup":"",
				"work":"phone.getButton()",
				"loop":"" 
			}
		],

    ["r",
			"ArduinoBlue get throttle",
			"abGetThrottle",
			{
				"inc":"#include \"ArduinoBlue_hf.h\"\n",
				"def":"ArduinoBlue phone(bluetooth);\n",
				"setup":"",
				"work":"phone.getThrottle()",
				"loop":"" 
			}
		],

    ["r",
			"ArduinoBlue get steering",
			"abGetSteering",
			{
				"inc":"#include \"ArduinoBlue_hf.h\"\n",
				"def":"ArduinoBlue phone(bluetooth);\n",
				"setup":"",
				"work":"phone.getSteering()",
				"loop":"" 
			}
		],

    ["r",
			"ArduinoBlue get slider ID",
			"abGetSliderID",
			{
				"inc":"#include \"ArduinoBlue_hf.h\"\n",
				"def":"ArduinoBlue phone(bluetooth);\n",
				"setup":"",
				"work":"phone.getSliderId()",
				"loop":"" 
			}
		],

    ["r",
			"ArduinoBlue get slider value",
			"abGetSliderValue",
			{
				"inc":"#include \"ArduinoBlue_hf.h\"\n",
				"def":"ArduinoBlue phone(bluetooth);\n",
				"setup":"",
				"work":"phone.getSliderVal()",
				"loop":"" 
			}
		],

    ["r",
			"ArduinoBlue get text",
			"abGetText",
			{
				"inc":"#include \"ArduinoBlue_hf.h\"\n",
				"def":"ArduinoBlue phone(bluetooth);\n",
				"setup":"",
				"work":"phone.getText()",
				"loop":"" 
			}
		],

    ["w",
			"ArduinoBlue send text %s",
			"abSendText",
			"hello",
			{
				"inc":"#include \"ArduinoBlue_hf.h\"\n",
				"def":"ArduinoBlue phone(bluetooth);\n",
				"setup":"",
				"work":"phone.sendText({0});\n",
				"loop":"" 
			}
		]
	],

  "menus": {
		"board": ["HD 2","HD 3","HD 4"],
		"digital":["HIGH","LOW"],
    "motorStop": ["A", "B", "A+B"],
		"mp3repeat":["once", "repeat"],
		"mp3command":["Play next track","Play previous track","Increase volume","Decrease volume","Pause","Resume","Stop"],
		"LCDI2C": ["0x27", "0x3F"],
		"LCDrows": ["1", "2", "3", "4"],
		"LCDcolumns": ["16", "20"],
		"BT_TX": ["A0","A1","A2","A3","A4","A5",2,3,4,5,6,7,8,9,10,11,12],
		"BT_RX": ["A0","A1","A2","A3","A4","A5",2,3,4,5,6,7,8,9,10,11,12],
    "BITTY_EVENT": ["Dpad","Touchpad motion","Touchpad control","Other control","Sampling Control","Pad", "Pin"],
    "DPAD_PAD": ["left", "right"],
    "DPAD_BUTTON": ["top", "bottom", "left", "right"],
    "DPAD_STATE": ["pressed", "released"]
	},
    
  "values":{
    "A": 1,
    "B": 2,
    "A+B": 3,
		"HD 2":240,
		"HD 3":350,
		"HD 4":400,
		"HIGH":1,
		"LOW":0,
		"once":0,
		"repeat":1,
		"Play next track": 1,
		"Play previous track": 2,
		"Increase volume": 4,
		"Decrease volume": 5,
		"Pause": 14,
		"Resume": 13,
		"Stop": 22,
		"A0": 14,
		"A1": 15,
		"A2": 16,
		"A3": 17,
		"A4": 18,
		"A5": 19,
    "pressed": 1,
    "released": 0
  },

  "translators":{
		"zh_CN":{
			"HIGH":"高电平",
			"LOW":"低电平",
			"digitalWrite( %n , %d.digital )":"数字口输出( %n ,%d.digital )"
		}
	}
}
